#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http')
const debug = require('debug')('ghog-day:server')
const app = require('../app')
const { preloadImageSizes } = require('../src/routes/utils')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Start server only after preloading images
 */
;(async () => {
  try {
    await preloadImageSizes()
    const server = http.createServer(app)

    server.listen(port)
    server.on('error', onError)
    server.on('listening', () => {
      const addr = server.address()
      const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
      debug('Listening on ' + bind)
    })
  } catch (err) {
    console.error('Failed to preload image sizes:', err)
    process.exit(1)
  }
})()

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}
